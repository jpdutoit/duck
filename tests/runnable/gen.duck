import "./assert";

extern struct duration {
  constructor(float);
}
function samples(amount: float) -> duration(amount);
extern struct Now;
extern now: Now;

extern function operator+(float, float) -> float;
extern function operator*(float, float) -> float;
extern function sin(float) -> float;

module A {
  output: mono = 0;
  function tick() {
    output = output + 1;
  }
}

module B {
  input: mono = 0;
  output: mono = 0;
  function tick() {
    output = input * 2;
  }
}

module C {
  input: mono = 0;
  output: mono = 0;
  function tick() {
    output = input + 1;
  }
}



A >> B >> C >> Assert([3, 5, 7, 9, 11]);
A.output >> B >> Assert([2, 4, 6, 8, 10]);
A >> C >> Assert([2, 3, 4, 5, 6]).input;

A >> c1: C >> Assert([1, 1, 1, 1, 1]).input;
0 >> c1.input;

A >> c2: C >> Assert([1, 1, 1, 1, 1]).input;
c2.input = 0;

now += 5 samples;


extern module DAC {
  input: mono;
}
module D {
  input: mono;
  dac: DAC;
  function tick() {
    dac.input = input;
  }
}

0 >> D;
