
generator Phasor {
  frequency freq = 440 hz;
  mono phase = 0;
  mono output = 0;
  frequency input : this.freq;

  function tick() {
    output = phase;
    phase = (phase + (input / SAMPLE_RATE)) % 1.0;
  }
}

generator SinOsc {
  Phasor phasor;
  frequency freq : this.phasor.freq;
  frequency input : this.phasor.input;
  mono output;

  //sin(phasor * 2 * 3.141592) >> mono output;

  function tick() {
    output = sin(phasor * 2 * 3.141592);
  }
}


generator Triangle {
  Phasor phasor;
  frequency freq : this.phasor.freq;
  frequency input : this.phasor.input;
  mono output;

  function tick() {
    output = abs(phasor * 2 - 1.0) * 2 - 1;
  }
}
/*
extern generator SinOsc {
  mono phase;
  frequency freq;
  frequency input;
  mono output;
}*/

extern generator AR {
  duration attack;
  duration release;
  mono input;
  mono output;
}

extern generator Echo {
  mono input;
  mono output;
  mono gain;
}

extern generator Printer {
  mono input;
}

extern generator OSCValue {
  mono output;
}

extern generator Delay {
  mono input;
  mono output;
}

extern generator WhiteNoise {
  mono output;
}
/*
extern generator Triangle {
  frequency freq;
  frequency input;
  mono output;
}*/

extern generator SawTooth {
  mono min;
  frequency freq;
  frequency input;
  mono output;
}

extern generator DAC {
  mono input;
  mono left;
  mono right;
}

extern generator Clock {
  frequency input;
  mono output;
}

extern generator Pat {
  mono input;
  mono output;
}

extern generator ScaleQuant {
  mono input;
  mono key;
  mono output;
}

extern generator SAH {
  mono trigger;
  mono input;
  mono output;
}

extern generator Pitch {
  mono input;
  frequency output;
}

extern generator Mono {
  mono output;
  mono input;
}

extern generator Frequency {
  frequency output;
  frequency input;
}

extern generator Assert {
  mono input;
  mono output;
}

extern generator Square {
  frequency freq;
  frequency input;
  mono output;
}

/*

generator SnareDrum {
  mono input : trigger.input;
  mono output;

  duration release : trigger.release;
  duration attack : trigger.attack;

  init() {
    50 ms => release;
    4 ms  => attack;

    WhiteNoise noise * AR trigger >> output;
  }
}

struct duration {
  float value;

  init(float v) {
    value = v;
  }
}
typedef float duration;
function op+(duration l, duration r) -> duration {
  return duration(float(l) + float(r));
}
function op*(duration l, double r) -> duration {
  return duration(float(l) * r);
}
function op*(double l, duration r) -> duration {
  return duration(l * float(r));
}

*/

/*

function seconds(float s) => duration(s * SAMPLE_RATE);
function ms(float s) => duration(s * SAMPLE_RATE);
function op+(duration l, duration r) => duration(l.raw + r.raw);
function op-(duration l, duration r) => duration(l.raw - r.raw);
function op/(duration l, duration r) => l.raw / r.raw;

unit duration;

unit frequency;
function hz(float f) => frequency(f);
function bpm(float f) => frequency(f * 60);

unit seconds;
unit minutes = 60 seconds;
unit ms = 1 seconds / 1000;
unit hz = 1 / 1 seconds;
unit bpm = 1 / 1 minute;

extern function operator/(num, frequency) => period;
extern function operator/(duration, frequency) => num;

extern function operator+(duration, duration) => duration;

extern function operator+(duration, duration) => duration;
extern function operator*(duration, float) => duration;

extern function ramp(ref float value, duration duration);

*/
