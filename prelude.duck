
extern generator SinOsc {
  mono phase;
  frequency freq;
  frequency input;
  mono output;
}

extern generator AR {
  Duration attack;
  Duration release;
  mono input;
  mono output;
}

extern generator WhiteNoise {
  mono output;
}

extern generator Triangle {
  frequency freq;
  frequency input;
  mono output;
}

extern generator SawTooth {
  mono min;
  frequency freq;
  frequency input;
  mono output;
}

extern generator DAC {
  mono input;
  mono left;
  mono right;
}

extern generator Clock {
  mono output;
}

extern generator Pat {
  mono input;
  mono output;
}

extern generator ScaleQuant {
  mono input;
  mono key;
  mono output;
}

extern generator SAH {
  mono trigger;
  mono input;
  mono output;
}

extern generator Pitch {
  mono input;
  frequency output;
}

extern generator Mono {
  mono output;
  mono input;
}

extern generator Frequency {
  frequency output;
  frequency input;
}

extern generator Assert {
  mono input;
  mono output;
}

extern generator Square {
  frequency freq;
  frequency input;
  mono output;
}

/*

generator SnareDrum {
  mono input : trigger.input;
  mono output;

  Duration release : trigger.release;
  Duration attack : trigger.attack;

  init() {
    50 ms => release;
    4 ms  => attack;

    WhiteNoise noise * AR trigger >> output;
  }
}

struct duration {
  float value;

  init(float v) {
    value = v;
  }
}
typedef float duration;
function op+(Duration l, Duration r) -> Duration {
  return Duration(float(l) + float(r));
}
function op*(Duration l, double r) -> Duration {
  return Duration(float(l) * r);
}
function op*(double l, Duration r) -> Duration {
  return Duration(l * float(r));
}

*/

/*

function seconds(float s) => duration(s * SAMPLE_RATE);
function ms(float s) => duration(s * SAMPLE_RATE);
function op+(Duration l, Duration r) => duration(l.raw + r.raw);
function op-(Duration l, Duration r) => duration(l.raw - r.raw);
function op/(Duration l, Duration r) => l.raw / r.raw;

unit duration;

unit frequency;
function hz(float f) => frequency(f);
function bpm(float f) => frequency(f * 60);

unit seconds;
unit minutes = 60 seconds;
unit ms = 1 seconds / 1000;
unit hz = 1 / 1 seconds;
unit bpm = 1 / 1 minute;

extern function operator/(num, frequency) => period;
extern function operator/(Duration, frequency) => num;

extern function operator+(Duration, Duration) => Duration;

extern function operator+(Duration, Duration) => Duration;
extern function operator*(Duration, float) => Duration;

extern function ramp(ref float value, Duration duration);

*/
