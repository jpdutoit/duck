import "runtime";

module Phasor {
  freq: frequency = 440 hz;
  phase: mono = 0;

  output: mono = 0;

  function tick() {
    output = phase;
    phase = (phase + (input / SAMPLE_RATE)) % 1.0;

  }
  alias input = freq;
}

module Clock {
  freq: frequency = 1 hz;
  alias input = freq;
  output: mono = 1;

  //TODO: Phase should be double precision
  phase: mono = 1.0;

  function tick() {
    phase = (phase + freq / SAMPLE_RATE);
    if phase >= 1.0 {
      phase = phase % 1.0;
      output = 1;
    } else {
      output = 0;
    }
  }
}

module Pitch {
  input: mono;
  alias output = frequency(440 * powf(2, (input - 49)/ 12));
}

extern function log2(float) -> float;
extern function log2(frequency) -> float;
extern function sum(buffer: float[]) -> float;
extern function max(float, float) -> float;
extern function min(float, float) -> float;
extern function floorf(float) -> float;
extern function sqrt(float) -> float;
/*
module LowPass {
  buffer: float[256];
  input: float;
  freq: frequency;

  function tick() {
    buffer[next] = input;
    next = (next + 1) % 256;

    f: float = freq / SAMPLE_RATE;
    N: float = floorf(min(255, sqrt(0.196202 + f*f)/f));
  }

  next: float;
}*/

module SinOsc {
  @private phasor: Phasor;

  alias freq = this.phasor.freq;
  alias input = this.phasor.freq;
  alias output = sin(phasor * 2 * 3.141592);
}


module Triangle {
  @private phasor: Phasor;
  alias freq = this.phasor.freq;
  alias input = this.phasor.freq;
  alias output = abs(phasor * 2 - 1.0) * 2 - 1;
}

module SawOsc {
  @private phasor: Phasor;
  alias freq = this.phasor.freq;
  alias input = this.phasor.freq;
  alias output = phasor * 2 - 1;
}

extern module ADC {
  constructor();
  output: mono;
}

//extern function registerEndpoint(DAC);

extern module DAC {
  constructor();

  input: mono;
  left: mono;
  right: mono;
}


module Mono {
  input: mono;
  alias output = input;
}

module Frequency {
  input: frequency;
  alias output = input;
}

extern module Assert {
  constructor();

  input: mono;
  output: mono;
  constructor(float);
  constructor(float[]);
}


extern module Pat {
  constructor(string);
  input: mono;
  output: mono;
}

extern module ScaleQuant {
  constructor(float, float[]);
  input: mono;
  key: mono;
  output: mono;
}

module Square {
  phasor: Phasor;
  alias freq = phasor.freq;
  alias input = phasor.freq;
  output: mono;

  lo: float = 0;
  hi: float = 1;

  function tick() {
    if phasor < 0.5 {
      output = lo;
    } else {
      output = hi;
    }
  }
}

extern module AR {
  constructor();

  attack: duration;
  release: duration;
  input: mono;
  output: mono;
}

module Delay {
  constructor(length: duration) {
    this.length = length;
  }

  input: mono = 0;
  output: mono = 0;
  length: duration;

  function tick() {
    buffer.length = int(length);
    output = buffer[index];
    buffer[index] = input;
    index = (index + 1) % buffer.length;
  }

  buffer: SampleBuffer;
  index: int = 0;
}


module Echo {
  constructor(length: duration) {
  	this.length = length;
  }

  @private delay: Delay;
  alias length = delay.length;
  input: mono = 0;
  gain: mono = 0.5;
  output: mono = 0;

  function tick() {
    delay.input = input + output * gain;
    output = input + delay.output;
  }
}

/*extern module OSCValue {
  output: mono;
}*/

module WhiteNoise {
  alias output = uniform(0-1.0, 1.0);
}

module PairwiseAvg {
  input: mono = 0;
  output: mono = 0;

  @private inputHistory: mono = 0;

  function tick() {
    output = (inputHistory + input) * 0.5;
    inputHistory = input;
  }
}

module TriggerDivider {
  input: mono;
  alias trigger = input;
  output: mono;
  counter: float = 0;
  divisor: float = 2;

  function tick() {
    if input == 0 {
      output = 0;
    } else {
      //TODO: output = 1 if counter == 0 else 0;
      if counter == 0 {
        output = 1;
      } else {
        output = 0;
      }
      counter = (counter + 1) % divisor;
    }
  }
}

module Gate {
  input: mono = 0;
  alias trigger = input;
  output: mono;

  length: duration;
  remaining: duration = 0 samples;

  function tick() {
    if trigger != 0 {
      remaining = length;
    }
    if remaining > 0 samples {
      output = 1;
      remaining = remaining - 1 samples;
    } else {
      output = 0;
    }
  }
}

module SampleAndHold {
  input: mono = 0;
  trigger: mono = 0;
  output: mono = 0;

  function tick() {
    if trigger > 0 {
      output = input;
    }
  }
}

module RisingEdge {
  input: mono;
  output: mono;

  function tick() {
    output = input > last;
    last = input;
  }

  @private last: mono = 0;
}



module FallingEdge {
  input: mono;
  output: mono;

  function tick() {
    output = input > last;
    last = input;
  }

  @private last: mono = 0;
}

module Edge {
  input: mono;
  output: mono;

  function tick() {
    output = input != last;
    last = input;
  }

  @private last: mono = 0;
}
