import "runtime";

distinct semitones : float;

extern function operator*(float, semitones) -> semitones;
extern function operator*(semitones, float) -> semitones;
extern function operator+(semitones, semitones) -> semitones;
extern function operator-(semitones, semitones) -> semitones;
function toFrequency(key: semitones) -> 440 hz * powf(2, (float(key) - 49)/ 12);

@private struct Name {
  @static:
  alias a = 0;
  alias b = 1;
  alias c = 2;
  alias d = 3;
  alias e = 4;
  alias f = 5;
  alias g = 6;
}

struct Key {
  @static:

  a♭ := [0-1, Name.a];
  a := [0, Name.a];
  a♯ := [1, Name.a];

  b♭ := [1, Name.b];
  b := [2, Name.b];
  b♯:= [3, Name.b];

  c♭:= [2, Name.c];
  c:= [3, Name.c];
  c♯ := [4, Name.c];

  d♭ := [4, Name.d];
  d := [5, Name.d];
  d♯ := [6, Name.d];

  e♭ := [6, Name.e];
  e := [7, Name.e];
  e♯ := [8, Name.e];

  f♭ := [7, Name.f];
  f := [8, Name.f];
  f♯ := [9, Name.f];

  g♭ := [9, Name.g];
  g := [10, Name.g];
  g♯ := [11, Name.g];
}


struct Scale {
  noteNumber: int;
  mode: int;
  key: int;

  @private alias octave = 2 * 12 + 1;
  @static majorScale := [0, 2, 4, 5, 7, 9, 11];

  constructor(key: int[2], mode: int) {
    this.mode = mode;
    this.key = key[0];
    this.noteNumber = key[1];
  }

  function pianoKey(index: int, bend: float) -> semitones {
    scalePosition := (7 - noteNumber + index + mode);
    return semitones(octave + key + majorScale[scalePosition % 7] + (scalePosition / 7) * 12  + bend - majorScale[mode]);
  }

  alias a♭ = pianoKey(Name.a, 0-1);
  alias a = pianoKey(Name.a, 0);
  alias a♯ =  pianoKey(Name.a, 1);

  alias b♭ = pianoKey(Name.b, 0-1);
  alias b = pianoKey(Name.b, 0);
  alias b♯ = pianoKey(Name.b, 1);

  alias c♭ = pianoKey(Name.c, 0-1);
  alias c = pianoKey(Name.c, 0);
  alias c♯ = pianoKey(Name.c, 1);

  alias d♭ = pianoKey(Name.d, 0-1);
  alias d = pianoKey(Name.d, 0);
  alias d♯ = pianoKey(Name.d, 1);

  alias e♭ = pianoKey(Name.e, 0-1);
  alias e = pianoKey(Name.e, 0);
  alias e♯ = pianoKey(Name.e, 1);

  alias f♭ = pianoKey(Name.f, 0-1);
  alias f = pianoKey(Name.f, 0);
  alias f♯ = pianoKey(Name.f, 1);

  alias g♭ = pianoKey(Name.g, 0-1);
  alias g = pianoKey(Name.g, 0);
  alias g♯ = pianoKey(Name.g,1);
}

struct Mode {
  @static:

  ionian := 0;
  dorian := 1;
  phrygian := 2;
  lydian := 3;
  mixolydian := 4;
  aeolian := 5;
  locrian := 6;

  //major: int { get { return 0; }
  alias major = ionian;
  alias minor = aeolian;
}

struct CircleOf5ths {
  @static:

  alias C = Scale(Key.c, Mode.major);
  alias G = Scale(Key.g, Mode.major);
  alias D = Scale(Key.d, Mode.major);
  alias A = Scale(Key.a, Mode.major);
  alias E = Scale(Key.e, Mode.major);
  alias B = Scale(Key.b, Mode.major);
  alias C♭ = Scale(Key.c♭, Mode.major);
  alias F♯ = Scale(Key.f♯, Mode.major);
  alias G♭ = Scale(Key.g♭, Mode.major);
  alias D♭ = Scale(Key.d♭, Mode.major);
  alias C♯ = Scale(Key.c♯, Mode.major);
  alias A♭ = Scale(Key.a♭, Mode.major);
  alias E♭ = Scale(Key.e♭, Mode.major);
  alias B♭ = Scale(Key.b♭, Mode.major);
  alias F = Scale(Key.f, Mode.major);
}

module Phasor {
  freq: frequency = 440 hz;
  phase: mono = 0;

  output: mono = 0;

  function tick() {
    output = phase;
    phase = (phase + (input / SAMPLE_RATE)) % 1.0;

  }
  alias input = freq;
}

module Clock {
  freq: frequency = 1 hz;
  alias input = freq;
  output: mono = 1;

  //TODO: Phase should be double precision
  phase: mono = 1.0;

  function tick() {
    phase = (phase + freq / SAMPLE_RATE);
    if phase >= 1.0 {
      phase = phase % 1.0;
      output = 1;
    } else {
      output = 0;
    }
  }
}

//function pitch(key: float) -> 440 hz * powf(2, (input - 49)/ 12);

module Pitch {
  input: mono;
  alias output = frequency(440 * powf(2, (input - 49)/ 12));
}


extern function log2(frequency) -> float;
extern function sum(buffer: float[]) -> float;
extern function max(float, float) -> float;
extern function min(float, float) -> float;
extern function floorf(float) -> float;
extern function sqrt(float) -> float;
/*
module LowPass {
  buffer: float[256];
  input: float;
  freq: frequency;

  function tick() {
    buffer[next] = input;
    next = (next + 1) % 256;

    f: float = freq / SAMPLE_RATE;
    N: float = floorf(min(255, sqrt(0.196202 + f*f)/f));
  }

  next: float;
}*/

module SinOsc {
  @private phasor: Phasor;

  alias freq = this.phasor.freq;
  alias input = this.phasor.freq;
  alias output = sin(phasor * 2 * 3.141592);
}


module Triangle {
  @private phasor: Phasor;
  alias freq = this.phasor.freq;
  alias input = this.phasor.freq;
  alias output = abs(phasor * 2 - 1.0) * 2 - 1;
}

module SawOsc {
  @private phasor: Phasor;
  alias freq = this.phasor.freq;
  alias input = this.phasor.freq;
  alias output = phasor * 2 - 1;
}

extern module ADC {
  constructor();
  output: mono;
}

//extern function registerEndpoint(DAC);

@private extern function outputAudioBuffer(mono[2][64]);

@output
module DAC {
  input: mono;

  function tick() {
    buffer[index][0] = input;
    buffer[index][1] = input;
    index = index + 1;

    if index == 64 {
      outputAudioBuffer(buffer);
      index = 0;
    }
  }

@private:
  buffer: mono[2][64];
  index: int = 0;
}

module Mono {
  input: mono;
  alias output = input;
}

module Frequency {
  input: frequency;
  alias output = input;
}

extern module Assert {
  constructor();

  input: mono;
  output: mono;
  constructor(float);
  constructor(float[]);
}


extern module Pat {
  constructor(string);
  input: mono;
  output: mono;
}

extern module ScaleQuant {
  constructor(float, float[]);
  input: mono;
  key: mono;
  output: mono;
}

module Square {
  phasor: Phasor;
  alias freq = phasor.freq;
  alias input = phasor.freq;
  output: mono;

  lo: float = 0;
  hi: float = 1;

  function tick() {
    if phasor < 0.5 {
      output = lo;
    } else {
      output = hi;
    }
  }
}

module AR {
  attack := 1000 ms;
  release := 1000 ms;

  input: mono;
  output: mono;

  function tick() {
    if input > 0 and lastInput <= 0 {
      elapsed = 0 samples;
      att = attack;
      rel = release;
      lastInput = input;
    }
    if input <= 0 and lastInput > 0 {
      if elapsed >= att {
        elapsed = 0 samples;
        lastInput = input;
      }
    }

    if lastInput > 0 {
      // ADS
      if elapsed < att {
        tmp := 1 - output;
        output = output + tmp / float(att - elapsed);
      } else {
        output = 1.0;
        return;
      }
    } else {
      // R
      if elapsed < rel {
        output += (0 - output) * 1 / float(rel - elapsed);
      }
      else {
        output = 0;
        return;
      }
    }
    elapsed = elapsed + 1 samples;
  }

@private:
  att := 0 samples;
  rel := 0 samples;
  elapsed := 0 samples;
  lastInput : mono = 0;
}

module Delay {
  constructor(length: duration) {
    this.length = length;
  }

  input: mono = 0;
  output: mono = 0;
  length: duration;

  function tick() {
    buffer.length = int(length);
    output = buffer[index];
    buffer[index] = input;
    index = (index + 1) % buffer.length;
  }

  buffer: SampleBuffer;
  index: int = 0;
}


module Echo {
  constructor(length: duration) {
  	this.length = length;
  }

  @private delay: Delay;
  alias length = delay.length;
  input: mono = 0;
  gain: mono = 0.5;
  output: mono = 0;

  function tick() {
    delay.input = input + output * gain;
    output = input + delay.output;
  }
}

/*extern module OSCValue {
  output: mono;
}*/

module WhiteNoise {
  output: mono = 0;
  function tick() {
    output = uniform(0-1.0, 1.0);
  }
}

module PairwiseAvg {
  input: mono = 0;
  output: mono = 0;

  @private inputHistory: mono = 0;

  function tick() {
    output = (inputHistory + input) * 0.5;
    inputHistory = input;
  }
}

module TriggerDivider {
  input: mono;
  alias trigger = input;
  output: mono;
  counter: float = 0;
  divisor: float = 2;

  function tick() {
    if input == 0 {
      output = 0;
    } else {
      //TODO: output = 1 if counter == 0 else 0;
      if counter == 0 {
        output = 1;
      } else {
        output = 0;
      }
      counter = (counter + 1) % divisor;
    }
  }
}

module Gate {
  input: mono = 0;
  alias trigger = input;
  output: mono;

  length: duration;
  remaining: duration = 0 samples;

  function tick() {
    if trigger != 0 {
      remaining = length;
    }
    if remaining > 0 samples {
      output = 1;
      remaining = remaining - 1 samples;
    } else {
      output = 0;
    }
  }
}

module SampleAndHold {
  input: mono = 0;
  trigger: mono = 0;
  output: mono = 0;

  function tick() {
    if trigger > 0 {
      output = input;
    }
  }
}

module RisingEdge {
  input: mono;
  output: mono;

  function tick() {
    output = input > last;
    last = input;
  }

  @private last: mono = 0;
}



module FallingEdge {
  input: mono;
  output: mono;

  function tick() {
    output = input > last;
    last = input;
  }

  @private last: mono = 0;
}

module Edge {
  input: mono;
  output: mono;

  function tick() {
    output = input != last;
    last = input;
  }

  @private last: mono = 0;
}
