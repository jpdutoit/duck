extern struct frequency {
  constructor(float);
}

extern struct duration {
  constructor(float);
}

extern struct Time;

extern SAMPLE_RATE: frequency;
extern struct Now;
extern now: Now;

extern function operator+(float, float) -> float;
extern function operator*(float, float) -> float;
extern function operator-(float, float) -> float;
extern function operator/(float, float) -> float;
extern function operator%(float, float) -> float;

//TODO: Introduce bool type
extern function operator!=(float, float) -> float;
extern function operator==(float, float) -> float;
extern function operator>(duration, duration) -> float;
extern function operator>(float, float) -> float;
extern function operator>=(float, float) -> float;
extern function operator<(float, float) -> float;

extern function operator*(duration, float) -> duration;

extern function operator*(frequency, float) -> frequency;
extern function operator*(float, frequency) -> frequency;

extern function operator/(frequency, float) -> frequency;
extern function operator/(float, frequency) -> duration;
extern function operator/(float, duration) -> frequency;

extern function operator/(frequency, frequency) -> float;
extern function operator+(frequency, frequency) -> frequency;
extern function operator-(frequency, frequency) -> frequency;

extern function operator%(Time, duration) -> duration;
extern function operator*(float, duration) -> duration;
extern function operator+(duration, duration) -> duration;
extern function operator-(duration, duration) -> duration;

extern function printf(string) -> float;
extern function printf(string, float) -> float;
extern function printf(string, float, float) -> float;

extern function sin(float) -> float;
extern function abs(float) -> float;

extern function raw(f: frequency) -> float;

function hz(amount: float) -> frequency(amount);
function samples(amount: float) -> duration(amount);
function bpm(amount: float) -> frequency(amount / 60.0);
function ms(amount: float) -> duration(amount / 1000.0 * raw(SAMPLE_RATE));
function seconds(amount: float) -> duration(amount * raw(SAMPLE_RATE));

extern function wait(duration);
extern function uniform(float, float) -> float;
extern function powf(float, float) -> float;

module Phasor {
  freq: frequency = 440 hz;
  phase: mono = 0;
  output: mono = 0;
  input: freq;

  function tick() {
    output = phase;
    phase = (phase + (input / SAMPLE_RATE)) % 1.0;
  }
}

module Clock {
  freq: frequency = 1 hz;
  input: freq;
  output: mono = 1;

  //TODO: Phase should be double precision
  phase: mono = 1.0;

  function tick() {
    phase = (phase + freq / SAMPLE_RATE);
    if phase >= 1.0 {
      phase = phase % 1.0;
      output = 1;
    } else {
      output = 0;
    }
  }
}

module Pitch {
  input: mono;
  output: frequency;

  function tick() {
    output = frequency(440 * powf(2, (input - 49)/ 12));
  }
}

extern function sum(buffer: float[]) -> float;
extern function max(float, float) -> float;
extern function min(float, float) -> float;
extern function floorf(float) -> float;
extern function sqrt(float) -> float;
/*
module LowPass {
  buffer: float[256];
  input: float;
  freq: frequency;

  function tick() {
    buffer[next] = input;
    next = (next + 1) % 256;

    f: float = freq / SAMPLE_RATE;
    N: float = floorf(min(255, sqrt(0.196202 + f*f)/f));
  }

  next: float;
}*/

module SinOsc {
  phasor: Phasor;
  freq: this.phasor.freq;
  input: this.phasor.freq;
  output: mono;

  //TODO: Implement pipes in definition
  //sin(phasor * 2 * 3.141592) >> output: mono;

  function tick() {
    output = sin(phasor * 2 * 3.141592);
  }
}


module Triangle {
  phasor: Phasor;
  freq: this.phasor.freq;
  input: this.phasor.freq;
  output: mono;

  function tick() {
    output = abs(phasor * 2 - 1.0) * 2 - 1;
  }
}

module SawTooth {
  phasor: Phasor;
  freq: this.phasor.freq;
  input: this.phasor.freq;
  output: mono;

  function tick() {
    output = phasor * 2 - 1;
  }
}

extern module ADC {
  output: mono;
}

extern module DAC {
  input: mono;
  left: mono;
  right: mono;
}

extern module Mono {
  output: mono;
  input: mono;
}

extern module Frequency {
  output: frequency;
  input: frequency;
}

extern module Assert {
  input: mono;
  output: mono;
}


extern module Pat {
  constructor(string);
  input: mono;
  output: mono;
}

extern module ScaleQuant {
  constructor(float, float[]);
  input: mono;
  key: mono;
  output: mono;
}

module Square {
  phasor: Phasor;
  freq: phasor.freq;
  input: phasor.freq;
  output: mono;

  lo: float = 0;
  hi: float = 1;

  function tick() {
    if phasor < 0.5 {
      output = lo;
    } else {
      output = hi;
    }
  }
}

extern module AR {
  attack: duration;
  release: duration;
  input: mono;
  output: mono;
}

extern module Echo {
  constructor(duration);

  input: mono;
  output: mono;
  gain: mono;
}

extern module OSCValue {
  output: mono;
}

extern module Delay {
  constructor(duration);
  input: mono;
  output: mono;
}


module WhiteNoise {
  output: mono = 0;
  function tick() {
    output = uniform(0-1.0, 1.0);
  }
}

module TriggerDivider {
  input: mono;
  trigger: input;
  output: mono;
  counter: float = 0;
  divisor: float = 2;

  function tick() {
    if input == 0 {
      output = 0;
    } else {
      //TODO: output = 1 if counter == 0 else 0;
      if counter == 0 {
        output = 1;
      } else {
        output = 0;
      }
      counter = (counter + 1) % divisor;
    }
  }
}

module Gate {
  input: mono = 0;
  trigger: input;
  output: mono;

  length: duration;
  remaining: duration = 0 samples;

  function tick() {
    if trigger != 0 {
      remaining = length;
    }
    if remaining > 0 samples {
      output = 1;
      remaining = remaining - 1 samples;
    } else {
      output = 0;
    }
  }
}

module SampleAndHold {
  input: mono = 0;
  trigger: mono = 0;
  output: mono = 0;

  function tick() {
    if trigger > 0 {
      output = input;
    }
  }
}
